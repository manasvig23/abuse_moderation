import re
from datetime import datetime, timedelta
from typing import Dict
from sqlalchemy.orm import Session
from difflib import SequenceMatcher
import models

def calculate_similarity(text1: str, text2: str) -> float:
    """Calculate text similarity ratio between two texts"""
    return SequenceMatcher(None, text1.lower().strip(), text2.lower().strip()).ratio()

def is_promotional_content(text: str) -> bool:
    """Check if text contains promotional/spam keywords"""
    promotional_keywords = [
        'check out my', 'visit my', 'click here', 'buy now',
        'follow me', 'subscribe to', 'check my profile', 'dm me',
        'whatsapp', 'telegram', 'link in bio', 'follow for follow',
        'check this out', 'visit here', 'my website', 'my channel',
        'discount', 'limited offer', 'earn money', 'work from home'
    ]
    
    text_lower = text.lower()
    
    # Check for promotional keywords
    has_promotional = any(keyword in text_lower for keyword in promotional_keywords)
    
    # Check for URLs
    url_pattern = r'http[s]?://\S+|www\.\S+|\S+\.(com|net|org|io|co)\S*'
    has_url = bool(re.search(url_pattern, text_lower))
    
    return has_promotional or has_url

def detect_spam(text: str, user_id: int, post_id: int, db: Session) -> Dict:
    """
    SIMPLIFIED Spam Detection - Only 2 cases:
    
    1. Promotional content repeated 5+ times on SAME POST by SAME USER
    2. Same comment repeated 10+ times on SAME POST by SAME USER
    
    Returns: dict with is_spam, reasons, confidence, action, message
    """
    
    text_clean = text.strip()
    
    # Get all comments by this user on THIS SPECIFIC POST
    user_comments_on_this_post = db.query(models.Comment).filter(
        models.Comment.user_id == user_id,
        models.Comment.post_id == post_id,
        models.Comment.status != "deleted"
    ).order_by(models.Comment.created_at.desc()).all()
    
    # Count exact and similar repetitions ON THIS POST ONLY
    exact_count = 0
    similar_count = 0
    
    for comment in user_comments_on_this_post:
        similarity = calculate_similarity(text_clean, comment.text)
        if similarity == 1.0:
            exact_count += 1
        elif similarity >= 0.85:
            similar_count += 1
    
    # Check if content is promotional
    is_promotional = is_promotional_content(text_clean)
    
    # CASE 1: Promotional content repeated 5+ times on SAME POST
    if is_promotional and (exact_count >= 5 or similar_count >= 5):
        return {
            "is_spam": True,
            "reasons": ["promotional_repetition_same_post"],
            "confidence": 95,
            "action": "auto_hide",
            "message": f"üö´ Spam Detected! Promotional content repeated {max(exact_count, similar_count)} times on this post. Your comment has been hidden."
        }
    
    # CASE 2: Same comment repeated 10+ times on SAME POST (regardless of content)
    if exact_count >= 10 or similar_count >= 10:
        return {
            "is_spam": True,
            "reasons": ["excessive_repetition_same_post"],
            "confidence": 100,
            "action": "auto_hide",
            "message": f"üö´ Spam Detected! Comment repeated {max(exact_count, similar_count)} times on this post. Your comment has been hidden."
        }
    
    # Warning for promotional content (3-4 times on same post)
    if is_promotional and (exact_count >= 3 or similar_count >= 3):
        return {
            "is_spam": False,
            "reasons": ["promotional_warning"],
            "confidence": 50,
            "action": "warning",
            "message": f"‚ö†Ô∏è Warning: You've posted similar promotional content {max(exact_count, similar_count)} times on this post. Further repetition may result in spam detection."
        }
    
    # Warning for excessive repetition (7-9 times on same post)
    if exact_count >= 7 or similar_count >= 7:
        return {
            "is_spam": False,
            "reasons": ["repetition_warning"],
            "confidence": 50,
            "action": "warning",
            "message": f"‚ö†Ô∏è Warning: You've posted similar comments {max(exact_count, similar_count)} times on this post. Further repetition may result in spam detection."
        }
    
    # Not spam
    return {
        "is_spam": False,
        "reasons": [],
        "confidence": 0,
        "action": "allow",
        "message": "No spam detected"
    }